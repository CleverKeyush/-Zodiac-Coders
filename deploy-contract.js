// Simple deployment script for VerificationStorage contract
// Run with: node deploy-contract.js

const { ethers } = require("ethers");
require("dotenv").config();

// Contract ABI (Application Binary Interface)
const CONTRACT_ABI = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidHash",
    type: "error",
  },
  {
    inputs: [],
    name: "UnauthorizedAccess",
    type: "error",
  },
  {
    inputs: [],
    name: "VerificationNotFound",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "verificationIndex",
        type: "uint256",
      },
    ],
    name: "VerificationDeactivated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "hash",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "verificationIndex",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "VerificationStored",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_hash",
        type: "string",
      },
    ],
    name: "storeVerificationHash",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

// Contract bytecode (you'll need to compile the Solidity contract to get this)
// This is a placeholder - you need to compile VerificationStorage.sol to get the actual bytecode
const CONTRACT_BYTECODE =
  "0x608060405234801561001057600080fd5b50610c9e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b1461016857806399debb391461017d578063a1b2bc8f146101a0578063a6b47e6b146101c3578063d1e8c89a146101e6578063f2fde38b14610209576100a9565b80630ff4c916146100ae5780631ddb9e07146100de5780635bb47ce6146101015780637065cb48146101245780637b55397014610137575b600080fd5b6100c16100bc366004610a42565b61021c565b6040516100d59493929190610b12565b60405180910390f35b6100f16100ec366004610a9c565b610331565b60405190151581526020016100d5565b61011461010f366004610a42565b6103c1565b60405190815260200161005d5b610137610132366004610a9c565b6104c2565b005b61014a610145366004610a9c565b6104d5565b604080519384526020840192909252908201526060016100d5565b6000546040516001600160a01b0390911681526020016100d5565b61019061018b366004610a9c565b61052e565b60405161005d9493929190610b5e565b6101b36101ae366004610a9c565b6105e7565b60405161005d9493929190610bc3565b6101d66101d1366004610a42565b610641565b604080519283526020830191909152016100d5565b6101f96101f4366004610a9c565b6106f9565b60405161005d9493929190610b5e565b610137610217366004610a9c565b610752565b600080600080846001600160a01b03166000036102545760405163295d3b7960e21b815260040160405180910390fd5b6001600160a01b038516600090815260026020526040902054851061028f57604051636f65136b60e11b815260040160405180910390fd5b6001600160a01b038516600090815260016020908152604080832087845290915290206000815460026001840154858252865260408120549094509250906102f0576040516314fa12b960e21b815260040160405180910390fd5b81546103099062010000900460ff1660011490565b9550855160208701516040808901516060909901518698509496509294509092506103279350505050565b5090919293565b60006001600160a01b03821661035d5760405163295d3b7960e21b815260040160405180910390fd5b6001600160a01b038216600090815260026020526040812054610387575060009050805b600061039584846107cb565b90508060000151156103b9576103b6600184815260200190815260200160002060020154565b91505b509092915050565b600060606001600160a01b03841661040e5760405163ec442f0560e01b815260048101849052602481018390526044015b60405180910390fd5b61041884846109eb565b156104395760405163235053f760e21b8152600481018490526024016103605b6001600160a01b0384166000908152600260205260408120549061045d57fe5b90506001600160a01b038516600090815260016020908152604080832084845290915290209350831561048e576000819055610491565b60015b6001600160a01b03861660009081526002602090815260408083208590558583528483529181206001818101959095556003909401899055426004909401939093559093919261050a5761051a565b426004820155905090565b6001600160a01b03861660008181526002602090815260408083208590558583526003845282842087905590518681527f8ee3ea5b6ebdca9de73d7e87fb7a638d0e6c6b77c42b87b0b0b3d8b2e4e8a66191015b60405180910390a29450505050919050565b606060006060600080600061054286610641565b6001600160a01b03871660009081526002602052604090205493985091965094509150851515915061058c5760408051600080825260208201909252935093509350935061088e565b6001600160a01b03871660009081526002602052604081205460005b81811015610604578386815181106105c2576105c2610c26565b60209081029190910101526001600160a01b03891660009081526001602090815260408083208484529091529020805491506105ff908390610c3c565b6105a8565b50959a949950979650919450925050565b600080600080600061062686610331565b9150915060009250925092509250935b939a939950929850939650565b60006001600160a01b03821661066d5760405163295d3b7960e21b815260040160405180910390fd5b6001600160a01b038216600090815260026020526040812054610697575060009050805b600080846106e5576040518060400160405280600081526020016000815250915060408051608081018252600080825260208201819052918101829052606081019190915261070e565b6001600160a01b038616600090815260016020908152604080832084845290915290205b925092505092915050565b600080600080600061070f86610331565b9150915060009250925092509250935b939a9399509298509396509450565b6000546001600160a01b031633146107865760405162461bcd60e51b81526004016107829190600080fd5b6001600160a01b0381166107ed5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610782565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b604080516080810182526000808252602082018190529181018290526060810191909152610857606084901c6109cf565b1561088e57506001600160a01b038216600090815260016020908152604080832093835292905220905590565b6040805160808101825260008082526020820181905291810182905260608101919091529392505050565b6000602080835260005b838110156108ee57818181526001600160a01b03851660009081526002602052604090205483039392946108f2565b50604080516020810190915260008152909590945050508252565b60006001600160a01b0382166109255750600090565b6001600160a01b0382811660009081526001602090815260408083206002845282528083205484529091529020546001149150505b919050565b6000604051806040016040528060008152602001600081525090506000848152602001600090fd5b604080516080810182526000808252602082018190529181018290526060810191909152826109bb576040805160808101825260008082526020820181905291810182905260608101919091529392505050565b61095a848460008554610a3c565b6001600160a01b03831660009081526001602090815260408083206000845290915290206000815460006002820154604051610a0190610c3c565b9184835260208301919091526040820152606001610782565b906000526020600020905b815481529060010190602001808311610a0e57829003601f168201915b505050505081526001810154602082015260028101546040820152600381015460609091015292915050565b634e487b7160e01b600052603260045260246000fd5b6000610a5d826001600160a01b03851684610a6e565b9050610a6881610ad4565b50505050565b600080856001600160a01b031660001415610a9e5760405163295d3b7960e21b815260040160405180910390fd5b8410610ab9576040516314fa12b960e21b815260040160405180910390fd5b6000856001600160a01b03166000610ae857506000936000610ae9565b84610af457506000935b50610afe565b9350935050610afe565b5050935093915050565b604080519051908152600060208201529081016000925092509250509250929050565b60405180910390f35b634e487b7160e01b600052601160045260246000fd5b60008219821115610b4f57610b4f610b36565b500190565b60008219821115610b6757610b67610b36565b500190565b8151815260208083015190820152604080830151908201526060918201519181019190915260800190565b8151815260208083015160ff16908201526040808301511515908201526060918201519181019190915260800190565b82815260ff6020820152604081016000925050509250929050565b634e487b7160e01b600052602260045260246000fd5b600181811c90821680610c0957607f821691505b6020821081141561095a57610c23610bf5565b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015610c4e57610c4e610c36565b50039056fea2646970667358221220"; // This needs to be replaced with actual compiled bytecode

async function deployContract() {
  try {
    console.log("üöÄ Starting VerificationStorage contract deployment...\n");

    // Validate environment variables
    const privateKey = process.env.PRIVATE_KEY;
    const rpcUrl = process.env.RPC_URL || process.env.SEPOLIA_RPC_URL;

    if (!privateKey) {
      throw new Error("PRIVATE_KEY environment variable is required");
    }

    if (!rpcUrl) {
      throw new Error(
        "RPC_URL or SEPOLIA_RPC_URL environment variable is required"
      );
    }

    // Setup provider and wallet
    console.log("üåê Connecting to network...");
    const provider = new ethers.JsonRpcProvider(rpcUrl);
    const wallet = new ethers.Wallet(privateKey, provider);

    console.log("üìù Deployer address:", wallet.address);

    // Check balance
    const balance = await provider.getBalance(wallet.address);
    console.log("üí∞ Deployer balance:", ethers.formatEther(balance), "ETH");

    if (balance === 0n) {
      throw new Error(
        "Insufficient balance for deployment. Please fund your wallet."
      );
    }

    // Get network info
    const network = await provider.getNetwork();
    console.log(
      "üåç Network:",
      network.name,
      "(Chain ID:",
      network.chainId.toString(),
      ")"
    );

    // WARNING: This is a placeholder bytecode
    console.log("\n‚ö†Ô∏è  WARNING: This script uses placeholder bytecode.");
    console.log("üìã To deploy the actual contract, you need to:");
    console.log("   1. Compile the VerificationStorage.sol contract");
    console.log(
      "   2. Replace the CONTRACT_BYTECODE with the compiled bytecode"
    );
    console.log("   3. Update the CONTRACT_ABI with the compiled ABI");
    console.log(
      "\nüîß Recommended approach: Use Hardhat or Remix IDE for deployment"
    );
    console.log("üìñ See DEPLOY_CONTRACT.md for detailed instructions\n");

    // For demonstration, we'll show what the deployment would look like
    console.log(
      "üìú Contract would be deployed with the following configuration:"
    );
    console.log("   - Contract: VerificationStorage");
    console.log("   - Compiler: Solidity ^0.8.20");
    console.log("   - Network:", network.name);
    console.log("   - Gas Price: Auto-detected");
    console.log("   - Gas Limit: Auto-estimated");

    console.log("\n‚úÖ Setup validation complete!");
    console.log("üìã Next steps:");
    console.log("   1. Compile the contract using Hardhat or Remix");
    console.log("   2. Use the deployment script from DEPLOY_CONTRACT.md");
    console.log(
      "   3. Update NEXT_PUBLIC_VERIFICATION_CONTRACT_ADDRESS in your .env file"
    );
  } catch (error) {
    console.error("‚ùå Deployment failed:", error.message);
    process.exit(1);
  }
}

// Run deployment
if (require.main === module) {
  deployContract();
}

module.exports = { deployContract };
